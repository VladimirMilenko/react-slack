{"version":3,"file":"host.cjs.production.min.js","sources":["../src/components/SlackBase.ts","../src/components/Actions.ts","../src/components/Text.ts","../src/components/Button.ts","../src/utils/index.ts","../src/components/Markdown.ts","../src/components/Context.ts","../src/components/DatePicker.ts","../src/components/Divider.ts","../src/components/Section.ts","../src/utils/host.ts","../src/utils/createElement.ts","../src/ui/index.ts","../src/containers/Stateless.ts","../src/containers/Stateful.ts"],"sourcesContent":["export type Root = Object & { onCommited: () => void };\n\nexport class Child {\n  public __type: string;\n  __root: Root;\n  props: any;\n\n  constructor(props: any, root: Root, type: string) {\n    this.props = props;\n    this.__root = root;\n    this.__type = type;\n  }\n  onCommit() {\n    this.__root.onCommited();\n  }\n}\n","import { Child } from './SlackBase';\nimport { Datepicker } from './DatePicker';\nimport { Button } from './Button';\n\ntype ActionsChild = Datepicker | Button;\n\nexport class Actions extends Child {\n  elements: Array<ActionsChild>;\n\n  constructor(props: any, root: any) {\n    super(props, root, 'ACTIONS');\n\n    this.elements = [];\n  }\n  appendChild(child: ActionsChild) {\n    this.elements.push(child);\n  }\n  removeChild(child: ActionsChild) {\n    const index = this.elements.indexOf(child);\n    this.elements.splice(index, 1);\n  }\n\n  insertBefore(child: ActionsChild, beforeChild: ActionsChild) {\n    const index = this.elements.indexOf(beforeChild);\n    if (index === 0) {\n      this.elements.unshift(child);\n    } else {\n      this.elements.splice(index - 1, 0, child);\n    }\n  }\n  render() {\n    return {\n      type: 'actions',\n      elements: this.elements.map(x => x.render()),\n    };\n  }\n}\n","import { Child, Root } from './SlackBase';\n\nexport class Text extends Child {\n  text: string;\n\n  constructor(text: string, root: Root) {\n    super({}, root, 'TEXT');\n    this.text = text;\n  }\n  setText(text: string) {\n    this.text = text;\n  }\n  render() {\n    return {\n      type: 'plain_text',\n      text: this.text,\n    };\n  }\n}\n","import { Child, Root } from './SlackBase';\nimport { Text } from './Text';\nimport { getFakeRoot } from '../utils';\n\ntype ButtonChildren = Text;\ntype ButtonStyle = 'primary' | 'danger' | undefined;\n\nexport interface ButtonProps {\n  style?: ButtonStyle;\n  onClick?: (event: Object) => void;\n  value?: string;\n}\n\nexport class Button extends Child {\n  children: Array<ButtonChildren>;\n  onClick?: (event: Object) => void;\n  style: ButtonStyle;\n  value?: string;\n  __actionId?: string;\n\n  constructor(props: ButtonProps, root: Root) {\n    super(props, root, 'BUTTON');\n\n    this.children = [];\n    this.style = props.style;\n    this.value = props.value;\n    this.onClick = props.onClick;\n  }\n  appendChild(child: ButtonChildren) {\n    if (child.__type === 'TEXT') {\n      this.children.push(child);\n    }\n  }\n  removeChild(child: ButtonChildren) {\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n  }\n\n  setActionId(actionId: string) {\n    this.__actionId = actionId;\n  }\n\n  insertBefore(child: ButtonChildren, beforeChild: ButtonChildren) {\n    const index = this.children.indexOf(beforeChild);\n    if (index === 0) {\n      this.children.unshift(child);\n    } else {\n      this.children.splice(index - 1, 0, child);\n    }\n  }\n\n  render() {\n    const { style, value } = this;\n\n    return {\n      type: 'button',\n      text: new Text(\n        this.children.map(x => x.text).join(''),\n        getFakeRoot()\n      ).render(),\n      action_id: this.__actionId,\n      value,\n      style,\n    };\n  }\n}\n","export const getFakeRoot = () => {\n  return {\n    onCommited: () => {},\n  };\n};\n","import { Child, Root } from './SlackBase';\nimport { Text } from './Text';\n\ntype MarkdownChildren = Text;\n\nexport class Markdown extends Child {\n  children: Array<MarkdownChildren>;\n\n  constructor(props: Object, root: Root) {\n    super(props, root, 'MARKDOWN');\n\n    this.children = [];\n  }\n  appendChild(child: MarkdownChildren) {\n    this.children.push(child);\n  }\n  removeChild(child: MarkdownChildren) {\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n  }\n  insertBefore(child: MarkdownChildren, beforeChild: MarkdownChildren) {\n    const index = this.children.indexOf(beforeChild);\n    if (index === 0) {\n      this.children.unshift(child);\n    } else {\n      this.children.splice(index - 1, 0, child);\n    }\n  }\n  render() {\n    return {\n      type: 'mrkdwn',\n      text: this.children.map(x => x.text).join(''),\n    };\n  }\n}\n","import { Child, Root } from './SlackBase';\nimport { Text } from './Text';\nimport { Markdown } from './Markdown';\nimport { getFakeRoot } from '../utils';\n\ntype ContextChildren = Text | Markdown;\n\nexport class Context extends Child {\n  elements: Array<ContextChildren>;\n\n  constructor(props: any, root: Root) {\n    super(props, root, 'CONTEXT');\n\n    this.elements = [];\n  }\n  appendChild(child: ContextChildren) {\n    this.elements.push(child);\n  }\n  removeChild(child: ContextChildren) {\n    const index = this.elements.indexOf(child);\n    this.elements.splice(index, 1);\n  }\n  insertBefore(child: ContextChildren, beforeChild: ContextChildren) {\n    const index = this.elements.indexOf(beforeChild);\n    if (index === 0) {\n      this.elements.unshift(child);\n    } else {\n      this.elements.splice(index - 1, 0, child);\n    }\n  }\n  render() {\n    return {\n      type: 'context',\n      elements: this.elements.map(x => {\n        if (x instanceof Markdown) {\n          return x.render();\n        }\n        if (x.__type === 'TEXT') {\n          return new Text(x.text, getFakeRoot()).render();\n        }\n        return null;\n      }),\n    };\n  }\n}\n","import { Child, Root } from './SlackBase';\nimport { Text } from './Text';\nimport { getFakeRoot } from '../utils';\n\nexport type DatePickerProps = {\n  value?: string;\n  placeholder?: string;\n  initialDate?: string;\n  actionId?: string;\n  onChange?: (e: Object) => void;\n};\n\nexport class Datepicker extends Child {\n  onChange?: (e: Object) => void;\n  value?: string;\n  placeholder?: string;\n  initialDate?: string;\n  __actionId?: string;\n\n  constructor(props: DatePickerProps, root: Root) {\n    super(props, root, 'DATEPICKER');\n\n    this.onChange = props.onChange;\n    this.value = props.value || undefined;\n    this.placeholder = props.placeholder;\n    this.initialDate = props.initialDate || undefined;\n    this.__actionId = props.actionId;\n  }\n\n  setActionId(actionId: string) {\n    this.__actionId = actionId;\n  }\n\n  render() {\n    const { value, placeholder, initialDate, __actionId } = this;\n\n    return {\n      type: 'datepicker',\n      placeholder: placeholder\n        ? new Text(placeholder, getFakeRoot()).render()\n        : undefined,\n      action_id: __actionId,\n      initial_date: value ? value : initialDate ? initialDate : undefined,\n    };\n  }\n}\n","import { Child, Root } from './SlackBase';\n\nexport class Divider extends Child {\n  children: never[];\n  constructor(props: Object, root: Root) {\n    super(props, root, 'DIVIDER');\n\n    this.children = [];\n  }\n  appendChild() {}\n  removeChild() {}\n  render() {\n    return {\n      type: 'divider',\n    };\n  }\n}\n","import { Root, Child } from './SlackBase';\nimport { Button } from './Button';\nimport { Datepicker } from './DatePicker';\nimport { Markdown } from './Markdown';\nimport { Text } from './Text';\n\ntype SectionChild = SectionAccessory | SectionText | SectionFields;\n\nexport class Section extends Child {\n  fields: SectionFields | null = null;\n  accessory: SectionAccessory | null = null;\n  text: SectionText | null = null;\n\n  constructor(props: Object, root: Root) {\n    super(props, root, 'SECTION');\n\n    this.fields = null;\n    this.accessory = null;\n    this.text = null;\n  }\n  appendChild(child: SectionChild) {\n    if (child instanceof SectionText) {\n      this.text = child;\n      return;\n    }\n    if (child instanceof SectionFields) {\n      this.fields = child;\n      return;\n    }\n    if (child instanceof SectionAccessory) {\n      this.accessory = child;\n      return;\n    }\n\n    throw new Error('Usupported type');\n  }\n  removeChild(child: SectionChild) {\n    if (child instanceof SectionText) {\n      this.text = null;\n      return;\n    }\n    if (child instanceof SectionFields) {\n      this.fields = null;\n      return;\n    }\n    if (child instanceof SectionAccessory) {\n      this.accessory = null;\n      return;\n    }\n\n    throw new Error('Usupported type');\n  }\n  insertBefore(child: SectionChild) {\n    this.appendChild(child);\n  }\n  render() {\n    return {\n      type: 'section',\n      text: this.text ? this.text.render() : undefined,\n      fields: this.fields ? this.fields.render() : undefined,\n      accessory: this.accessory ? this.accessory.render() : undefined,\n    };\n  }\n}\n\ntype TextChildren = Text | Markdown;\n\nexport class SectionText extends Child {\n  children: Array<TextChildren> = [];\n\n  constructor(props: Object, root: Root) {\n    super(props, root, 'SECTION_TEXT');\n    this.children = [];\n  }\n  appendChild(child: TextChildren) {\n    this.children.push(child);\n  }\n  removeChild(child: TextChildren) {\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n  }\n  insertBefore(child: TextChildren, beforeChild: TextChildren) {\n    const index = this.children.indexOf(beforeChild);\n    if (index === 0) {\n      this.children.unshift(child);\n    } else {\n      this.children.splice(index - 1, 0, child);\n    }\n  }\n  render = () => {\n    return {\n      type: this.children.some(x => x.__type === 'MARKDOWN')\n        ? 'mrkdwn'\n        : 'plain_text',\n      text: this.children\n        .map(x => x.render())\n        .map(x => x.text)\n        .join(''),\n    };\n  };\n}\n\ntype FieldsChildren = Markdown | Text;\n\nexport class SectionFields extends Child {\n  children: Array<FieldsChildren> = [];\n\n  constructor(props: Object, root: Root) {\n    super(props, root, 'SECTION_FIELDS');\n    this.children = [];\n  }\n  appendChild(child: FieldsChildren) {\n    this.children.push(child);\n  }\n  removeChild(child: FieldsChildren) {\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n  }\n  insertBefore(child: FieldsChildren, beforeChild: FieldsChildren) {\n    const index = this.children.indexOf(beforeChild);\n    if (index === 0) {\n      this.children.unshift(child);\n    } else {\n      this.children.splice(index - 1, 0, child);\n    }\n  }\n  render = () => {\n    return this.children.map(x => x.render());\n  };\n}\n\ntype AccessoryChildren = Button | Datepicker;\n\nexport class SectionAccessory extends Child {\n  children: Array<AccessoryChildren> = [];\n\n  constructor(props: Object, root: Root) {\n    super(props, root, 'SECTION_ACCESSORY');\n    this.children = [];\n  }\n  appendChild(child: AccessoryChildren) {\n    this.children.push(child);\n  }\n  removeChild(child: AccessoryChildren) {\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n  }\n  insertBefore(child: AccessoryChildren, beforeChild: AccessoryChildren) {\n    const index = this.children.indexOf(beforeChild);\n    if (index === 0) {\n      this.children.unshift(child);\n    } else {\n      this.children.splice(index - 1, 0, child);\n    }\n  }\n  render = () => {\n    if (this.children.length > 1) {\n      throw new Error('Accessory only accepts one child');\n    }\n    if (!this.children || this.children.length === 0) {\n      return null;\n    }\n    return this.children[0].render();\n  };\n}\n","// @ts-nocheck\nimport ReactReconciler from \"react-reconciler\";\nimport uuid from \"uuid/v4\";\nimport { createElement } from \"./createElement\";\nimport { Text } from '../components';\nimport { Button, DatePicker } from \"../ui\";\n\nconst hostConfig = {\n  getRootHostContext(rootContainerInstance) {\n    return {\n      root: rootContainerInstance\n    };\n  },\n\n  getChildHostContext(parentHostContext, type, rootContainerInstance) {\n    return {};\n  },\n\n  getPublicInstance(instance) {\n    return {};\n  },\n\n  prepareForCommit(containerInfo) { },\n\n  resetAfterCommit(containerInfo) { },\n\n  createInstance(\n    type,\n    props,\n    rootContainerInstance,\n    hostContext,\n    internalInstanceHandle\n  ) {\n    return createElement(type, props, rootContainerInstance);\n  },\n\n  createTextInstance(\n    text,\n    rootContainerInstance,\n    hostContext,\n    internalInstanceHandle\n  ) {\n    return new Text(text, rootContainerInstance);\n  },\n\n  appendInitialChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  finalizeInitialChildren(\n    hostNode,\n    type,\n    props,\n    rootContainerInstance,\n    hostContext\n  ) {\n    switch (type) {\n      case Button:\n        if (props.onClick) {\n          if (\n            hostNode.__root &&\n            hostNode.__root.handlerRegistry &&\n            hostNode.__actionId\n          ) {\n            delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n            hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n          }\n          hostNode.__actionId = uuid();\n\n          hostNode.onClick = props.onClick;\n\n          hostNode.__root.handlerRegistry[hostNode.__actionId] =\n            hostNode.onClick;\n\n          if (hostNode.__root) {\n            hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n          }\n        }\n        return;\n      case DatePicker:\n        if (props.onChange) {\n          if (\n            hostNode.__root &&\n            hostNode.__root.handlerRegistry &&\n            hostNode.__actionId\n          ) {\n            delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n            hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n          }\n          hostNode.__actionId = uuid();\n\n          hostNode.onChange = props.onChange;\n\n\n          hostNode.__root.handlerRegistry[hostNode.__actionId] =\n            hostNode.onChange;\n\n          if (hostNode.__root) {\n            hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n          }\n        }\n        return;\n      default:\n        return;\n    }\n\n    return false;\n  },\n  prepareUpdate(\n    domElement,\n    type,\n    oldProps,\n    newProps,\n    rootContainerInstance,\n    hostContext\n  ) {\n    const propKeys = new Set(\n      Object.keys(newProps).concat(Object.keys(oldProps))\n    ).values();\n    const payload = [];\n    for (let key of propKeys) {\n      if (\n        key !== \"children\" && // text children are already handled\n        oldProps[key] !== newProps[key]\n      ) {\n        payload.push({ [key]: newProps[key] });\n      }\n    }\n    return payload;\n  },\n  shouldSetTextContent(type, props) {\n    return false;\n  },\n\n  shouldDeprioritizeSubtree(type, props) {\n    console.log(\"shouldDeprioritizeSubtree\");\n  },\n\n  now: Date.now,\n\n  isPrimaryRenderer: true,\n  scheduleDeferredCallback: \"\",\n  cancelDeferredCallback: \"\",\n\n  // -------------------\n  //     Mutation\n  // -------------------\n\n  supportsMutation: true,\n\n  commitMount() {\n  },\n\n  commitUpdate(\n    hostNode:any,\n    updatePayload:any,\n    type:any,\n  ) {\n    switch (type) {\n      case Button:\n        updatePayload.forEach((update:any) => {\n          Object.keys(update).forEach(key => {\n            if (key === \"onClick\") {\n              if (hostNode.__root && hostNode.__root.handlerRegistry) {\n                delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n                hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n              }\n              hostNode.__actionId = uuid();\n\n              hostNode.onClick = update[key];\n\n              hostNode.__root.handlerRegistry[hostNode.__actionId] =\n                hostNode.onClick;\n              if (hostNode.__root) {\n                hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n              }\n            } else {\n              hostNode[key] = update[key];\n            }\n          });\n        });\n        break;\n      case DatePicker:\n        updatePayload.forEach((update:any) => {\n          Object.keys(update).forEach(key => {\n            if (key === \"onChange\") {\n              if (hostNode.__root && hostNode.__root.handlerRegistry) {\n                delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n                hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n              }\n              hostNode.__actionId = uuid();\n\n              hostNode.onChange = update[key];\n\n              hostNode.__root.handlerRegistry[hostNode.__actionId] =\n                hostNode.onChange;\n              if (hostNode.__root) {\n                hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n              }\n            } else {\n              hostNode[key] = update[key];\n            }\n          });\n        });\n        break;\n      default:\n        updatePayload.forEach((update:any) => {\n          // @ts-ignore\n          hostNode[key] = update[key];\n        });\n    }\n    setTimeout(() => {\n      hostNode.onCommit();\n    }, 0);\n  },\n\n  resetTextContent() {\n    throw new Error('Not implemented');\n  },\n\n  commitTextUpdate(textInstance:any, oldText:string, newText:string) {\n    textInstance.setText(newText);\n    setTimeout(() => {\n      textInstance.onCommit();\n    }, 0);\n  },\n\n  appendChild(parentInstance:any, child:any) {\n    parentInstance.appendChild(child);\n  },\n\n  appendChildToContainer(container:any, child:any) {\n    container.appendChild(child);\n  },\n\n  insertBefore() {\n  },\n\n  insertInContainerBefore(container:any, child:any, beforeChild:any) {\n    container.insertBefore(child, beforeChild);\n  },\n\n  removeChild(parentInstance:any, child:any) {\n    parentInstance.removeChild(child);\n  },\n\n  removeChildFromContainer(container, child) {\n    container.removeChild(child);\n  }\n};\n\nconst reconciler = ReactReconciler(hostConfig);\n\nexport const SlackDOM = {\n  render(component:any, container:any) {\n    let reconcilerContainer = reconciler.createContainer(\n      container,\n      false,\n      false\n    );\n    reconciler.updateContainer(component, reconcilerContainer, null, null);\n\n    return container;\n  }\n};\n","import {\n  Button,\n  Actions,\n  Context,\n  Markdown,\n  Divider,\n  Section,\n  SectionText,\n  SectionFields,\n  SectionAccessory,\n  Datepicker,\n} from '../components';\nimport { Root } from '../components/SlackBase';\n\nexport const createElement = (\n  type: string,\n  props: Object,\n  rootContainerInstance: Root\n) => {\n  const LIB: { [key: string]: Function } = {\n    BUTTON: () => new Button(props, rootContainerInstance),\n    ACTIONS: () => new Actions(props, rootContainerInstance),\n    CONTEXT: () => new Context(props, rootContainerInstance),\n    MARKDOWN: () => new Markdown(props, rootContainerInstance),\n    DIVIDER: () => new Divider(props, rootContainerInstance),\n    SECTION: () => new Section(props, rootContainerInstance),\n    SECTION_TEXT: () => new SectionText(props, rootContainerInstance),\n    SECTION_FIELDS: () => new SectionFields(props, rootContainerInstance),\n    SECTION_ACCESSORY: () => new SectionAccessory(props, rootContainerInstance),\n    DATEPICKER: () => new Datepicker(props, rootContainerInstance),\n  };\n\n  if (typeof LIB[type] === 'function') {\n    return LIB[type]();\n  }\n  throw new Error('Unsupported element type');\n};\n","export const Button = \"BUTTON\";\nexport const Actions = \"ACTIONS\";\nexport const Context = \"CONTEXT\";\nexport const Markdown = \"MARKDOWN\";\nexport const Divider = \"DIVIDER\";\nexport const Section = \"SECTION\";\nexport const SectionText = \"SECTION_TEXT\";\nexport const SectionFields = \"SECTION_FIELDS\";\nexport const SectionAccessory = \"SECTION_ACCESSORY\";\nexport const DatePicker = \"DATEPICKER\";\n","export class ObjectSlackContainer {\n  blocks: Array<Object>;\n  lastCommited: Object | null;\n\n  constructor() {\n\n    this.blocks = [];\n    this.lastCommited = null;\n  }\n\n  unsubscribeFromAction = () => {\n  };\n\n  subscribeToNewActionId = () => {\n  };\n\n  appendChild = (child: Object) => {\n    this.blocks.push(child);\n  };\n\n  removeChild = (child: Object) => {\n    const index = this.blocks.indexOf(child);\n\n    this.blocks.splice(index, 1);\n  };\n\n  insertBefore = (child: Object, beforeChild: Object) => {\n    const index = this.blocks.indexOf(beforeChild);\n\n    this.blocks.splice(index, 0, child);\n  };\n\n  onCommited = () => {\n  };\n  render = () => {\n    // @ts-ignore\n    return this.blocks.map(x => x.render());\n  };\n}\n","import {isEqual} from 'lodash';\nimport { RedisClient } from 'redis';\nimport { EventEmitter } from 'events';\n\ntype HandlerRegistry = { [key: string]: Function };\n\nexport class RedisSlackContainer {\n  handlerRegistry: HandlerRegistry;\n  subClient: RedisClient;\n  emitter: EventEmitter;\n  blocks: Array<Object>;\n  lastCommited: Object | null;\n\n  constructor(subClient: RedisClient, handlerRegistry: HandlerRegistry) {\n    this.handlerRegistry = handlerRegistry;\n    this.subClient = subClient;\n\n    this.blocks = [];\n    this.emitter = new EventEmitter();\n\n    this.subClient.on('message', (channel: string, message:any) => {\n      if (this.handlerRegistry[channel]) {\n        const msg = JSON.parse(message);\n\n        this.handlerRegistry[channel](msg);\n      }\n    });\n\n    this.lastCommited = null;\n  }\n\n  unsubscribeFromAction = (uuid: string) => {\n    this.subClient.unsubscribe(uuid);\n  };\n\n  subscribeToNewActionId = (uuid: string) => {\n    this.subClient.subscribe(uuid);\n  };\n\n  appendChild = (child: Object) => {\n    this.blocks.push(child);\n\n    setTimeout(this.onCommited, 0);\n  };\n\n  removeChild = (child: Object) => {\n    const index = this.blocks.indexOf(child);\n\n    this.blocks.splice(index, 1);\n\n    setTimeout(this.onCommited, 0);\n  };\n\n  insertBefore = (child: Object, beforeChild: Object) => {\n    const index = this.blocks.indexOf(beforeChild);\n\n    this.blocks.splice(index, 0, child);\n    setTimeout(this.onCommited, 0);\n  };\n\n  onCommited = () => {\n    const nextCommit = this.render();\n    if (!isEqual(this.lastCommited, nextCommit)) {\n      this.emitter.emit('commit', nextCommit);\n      this.lastCommited = nextCommit;\n    }\n  };\n  render = () => {\n    // @ts-ignore\n    return this.blocks.map(x => x.render());\n  };\n}\n"],"names":["Child","props","root","type","__root","__type","onCommit","onCommited","Actions","elements","appendChild","child","push","removeChild","index","this","indexOf","splice","insertBefore","beforeChild","unshift","render","map","x","Text","text","setText","Button","children","style","value","onClick","setActionId","actionId","__actionId","join","action_id","Markdown","Context","Datepicker","onChange","undefined","placeholder","initialDate","initial_date","Divider","Section","fields","accessory","SectionText","SectionFields","SectionAccessory","Error","_this2","some","_this3","_this4","length","reconciler","ReactReconciler","getRootHostContext","rootContainerInstance","getChildHostContext","parentHostContext","getPublicInstance","instance","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","LIB","BUTTON","ACTIONS","CONTEXT","MARKDOWN","DIVIDER","SECTION","SECTION_TEXT","SECTION_FIELDS","SECTION_ACCESSORY","DATEPICKER","createElement","createTextInstance","appendInitialChild","parentInstance","finalizeInitialChildren","hostNode","handlerRegistry","unsubscribeFromAction","uuid","subscribeToNewActionId","prepareUpdate","domElement","oldProps","newProps","payload","Set","Object","keys","concat","values","shouldSetTextContent","shouldDeprioritizeSubtree","console","log","now","Date","isPrimaryRenderer","scheduleDeferredCallback","cancelDeferredCallback","supportsMutation","commitMount","commitUpdate","updatePayload","forEach","update","key","setTimeout","resetTextContent","commitTextUpdate","textInstance","oldText","newText","appendChildToContainer","container","insertInContainerBefore","removeChildFromContainer","SlackDOM","component","reconcilerContainer","createContainer","updateContainer","_this","blocks","lastCommited","subClient","unsubscribe","subscribe","nextCommit","isEqual","emitter","emit","EventEmitter","on","channel","message","msg","JSON","parse"],"mappings":"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"}