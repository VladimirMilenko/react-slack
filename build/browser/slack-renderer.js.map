{"version":3,"file":"slack-renderer.js","sources":["../../slack-renderer/container.js","../../slack-components/SlackBase.js","../../slack-components/Actions.js","../../slack-components/Text.js","../../slack-components/Button.js","../../slack-components/Markdown.js","../../slack-components/Context.js","../../slack-components/DatePicker.js","../../slack-components/Divider.js","../../slack-components/Section.js","../../slack-renderer/index.js","../../slack-renderer/createElement.js","../../slack-renderer/components.js","../../app.js"],"sourcesContent":["import _ from 'lodash';\n\nexport class SlackContainer {\n  constructor(subClient, handlerRegistry, response_url, stateful) {\n    this.handlerRegistry = handlerRegistry;\n    this.subClient = subClient;\n    this.stateful = stateful;\n\n    this.blocks = [];\n    if (this.stateful) {\n      this.emitter = new EventEmitter();\n      this.response_url = response_url;\n\n      this.subClient.on(\"message\", (channel, message) => {\n        if (this.handlerRegistry[channel]) {\n          const msg = JSON.parse(message);\n          this.response_url = msg.response_url;\n\n          this.handlerRegistry[channel](msg);\n        }\n      });\n\n      this.lastCommited = null;\n    }\n  }\n\n  unsubscribeFromAction = uuid => {\n    this.stateful && this.subClient.unsubscribe(uuid);\n  };\n\n  subscribeToNewActionId = uuid => {\n    this.stateful && this.subClient.subscribe(uuid);\n  };\n\n  appendChild = child => {\n    this.blocks.push(child);\n\n    setImmediate(this.onCommited, 0);\n  };\n\n  removeChild = child => {\n    const index = this.blocks.indexOf(child);\n\n    this.blocks.splice(index, 1);\n\n    setImmediate(this.onCommited, 0);\n  };\n\n  insertBefore = (child, beforeChild) => {\n    const index = this.blocks.indexOf(beforeChild);\n\n    this.blocks.splice(index, 0, child);\n    setImmediate(this.onCommited, 0);\n  };\n\n  onCommited = () => {\n    const nextCommit = this.render();\n    if (!_.isEqual(this.lastCommited, nextCommit)) {\n      this.stateful && this.emitter.emit(\"commit\", nextCommit);\n      this.lastCommited = nextCommit;\n    }\n  };\n  render = () => {\n    return this.blocks.map(x => x.render());\n  };\n}\n","export class Child {\n  constructor(props, root, type) {\n    this.props = props;\n    this.__root = root;\n    this.__type = type;\n  }\n  onCommit() {\n    this.__root.onCommited();\n  }\n}\n","import { Child } from './SlackBase';\n\nexport class Actions extends Child {\n  constructor(props, root) {\n    super(props, root, \"ACTIONS\");\n\n    this.elements = [];\n  }\n  appendChild(child) {\n    this.elements.push(child);\n  }\n  removeChild(child) {\n    const index = this.elements.indexOf(child);\n    this.elements.splice(index, 1);\n  }\n\n  insertBefore(child, beforeChild) {\n    const index = this.elements.indexOf(beforeChild);\n    if (index === 0) {\n      this.elements.unshift(child);\n    } else {\n      this.elements.splice(index - 1, 0, child);\n    }\n  }\n  render() {\n    return {\n      type: \"actions\",\n      elements: this.elements.map(x => x.render())\n    };\n  }\n}\n","import { Child } from './SlackBase';\n\nexport class Text extends Child {\n    constructor(text, root) {\n        super(null, root, \"TEXT\");\n        this.text = text;\n    }\n    setText(text) {\n        this.text = text;\n    }\n    render() {\n        return {\n            type: \"plain_text\",\n            text: this.text\n        };\n    }\n}\n","import { Child } from './SlackBase';\nimport { Text } from './Text';\n\n\nexport class Button extends Child {\n  constructor(props, root) {\n    super(props, root, \"BUTTON\");\n\n    this.children = [];\n\n    this.onClick = props.onClick;\n  }\n  appendChild(child) {\n    if (child.__type === \"TEXT\") {\n      this.children.push(child);\n    }\n  }\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n    this.children.splice(index, 1);\n  }\n\n  insertBefore(child, beforeChild) {\n    const index = this.children.indexOf(beforeChild);\n    if (index === 0) {\n      this.children.unshift(child);\n    } else {\n      this.children.splice(index - 1, 0, child);\n    }\n  }\n\n  render() {\n    const { style, value, confirm } = this;\n\n    return {\n      type: \"button\",\n      text: new Text(this.children.map(x => x.text).join(\"\")).render(),\n      action_id: this.__actionId,\n      value,\n      style,\n      confirm\n    };\n  }\n}\n","import { Child } from './SlackBase';\n\nexport class Markdown extends Child {\n    constructor(props, root) {\n        super(props, root, \"MARKDOWN\");\n\n        this.children = [];\n    }\n    appendChild(child) {\n        this.children.push(child);\n    }\n    removeChild(child) {\n        const index = this.children.indexOf(child);\n        this.children.splice(index, 1);\n    }\n    insertBefore(child, beforeChild) {\n        const index = this.children.indexOf(beforeChild);\n        if (index === 0) {\n            this.children.unshift(child);\n        } else {\n            this.children.splice(index - 1, 0, child);\n        }\n    }\n    render() {\n        return {\n            type: \"mrkdwn\",\n            text: this.children.map(x => x.text).join(\"\")\n        };\n    }\n}\n","import { Child } from './SlackBase';\nimport { Text } from './Text';\nimport { Markdown } from './Markdown';\n\nexport class Context extends Child {\n  constructor(props, root) {\n    super(props, root, \"CONTEXT\");\n\n    this.elements = [];\n  }\n  appendChild(child) {\n    this.elements.push(child);\n  }\n  removeChild(child) {\n    const index = this.elements.indexOf(child);\n    this.elements.splice(index, 1);\n  }\n  insertBefore(child, beforeChild) {\n    const index = this.elements.indexOf(beforeChild);\n    if (index === 0) {\n      this.elements.unshift(child);\n    } else {\n      this.elements.splice(index - 1, 0, child);\n    }\n  }\n  render() {\n    return {\n      type: \"context\",\n      elements: this.elements.map(x => {\n        if (x instanceof Markdown) {\n          return x.render();\n        }\n        if (x.__type === \"TEXT\") {\n          return new Text(x.text).render();\n        }\n      })\n    };\n  }\n}\n","import { Child } from './SlackBase';\nimport { Text } from './Text';\n\nexport class Datepicker extends Child {\n  constructor(props, root) {\n    super(props, root, \"DATEPICKER\");\n\n    this.onChange = null;\n    this.value = props.value || undefined;\n    this.placeholder = props.placeholder;\n    this.initialDate = props.initialDate || undefined;\n  }\n\n  render() {\n    const { value, placeholder, initialDate, __actionId } = this;\n\n    return {\n      type: \"datepicker\",\n      placeholder: placeholder ? new Text(this.placeholder).render() : undefined,\n      action_id: this.__actionId,\n      initial_date: value ? value : initialDate ? initialDate : undefined\n    };\n  }\n}\n","import { Child } from './SlackBase';\n\nexport class Divider extends Child {\n    constructor(props, root) {\n        super(props, root, \"DIVIDER\");\n\n        this.children = [];\n    }\n    appendChild(child) { }\n    removeChild(child) { }\n    render() {\n        return {\n            type: \"divider\"\n        };\n    }\n}\n","import { Child } from './SlackBase';\n\nexport class Section extends Child {\n    constructor(props, root) {\n        super(props, root, \"SECTION\");\n\n        this.fields = null;\n        this.accessory = null;\n        this.text = null;\n    }\n    appendChild(child) {\n        switch (child.__type) {\n            case \"SECTION_TEXT\":\n                this.text = child;\n                break;\n            case \"SECTION_FIELDS\":\n                this.fields = child;\n                break;\n            case \"SECTION_ACCESSORY\":\n                this.accessory = child;\n                break;\n            default:\n                this.fields.push(child);\n        }\n    }\n    removeChild(child) {\n        switch (child.__type) {\n            case \"SECTION_TEXT\":\n                this.text = null;\n                break;\n            case \"SECTION_FIELDS\":\n                this.fields = null;\n                break;\n            case \"SECTION_ACCESSORY\":\n                this.accessory = null;\n                break;\n            default:\n                const index = this.children.indexOf(child);\n                this.fields.splice(index, 1);\n                break;\n        }\n    }\n    insertBefore(child, beforeChild) {\n        this.appendChild(child);\n    }\n    render() {\n        return {\n            type: \"section\",\n            text: this.text ? this.text.render() : undefined,\n            fields: this.fields ? this.fields.render() : undefined,\n            accessory: this.accessory ? this.accessory.render() : undefined\n        };\n    }\n}\n\nexport class SectionText extends Child {\n    constructor(props, root) {\n        super(props, root, \"SECTION_TEXT\");\n        this.children = [];\n    }\n    appendChild(child) {\n        this.children.push(child);\n    }\n    removeChild(child) {\n        const index = this.children.indexOf(child);\n        this.children.splice(index, 1);\n    }\n    insertBefore(child, beforeChild) {\n        const index = this.children.indexOf(beforeChild);\n        if (index === 0) {\n            this.children.unshift(child);\n        } else {\n            this.children.splice(index - 1, 0, child);\n        }\n    }\n    render = () => {\n        return {\n            type: this.children.some(x => x.__type === \"MARKDOWN\")\n                ? \"mrkdwn\"\n                : \"plain_text\",\n            text: this.children\n                .map(x => x.render())\n                .map(x => x.text)\n                .join(\"\")\n        };\n    };\n}\n\nexport class SectionFields extends Child {\n    constructor(props, root) {\n        super(props, root, \"SECTION_FIELDS\");\n        this.children = [];\n    }\n    appendChild(child) {\n        this.children.push(child);\n    }\n    removeChild(child) {\n        const index = this.children.indexOf(child);\n        this.children.splice(index, 1);\n    }\n    insertBefore(child, beforeChild) {\n        const index = this.children.indexOf(beforeChild);\n        if (index === 0) {\n            this.children.unshift(child);\n        } else {\n            this.children.splice(index - 1, 0, child);\n        }\n    }\n    render = () => {\n        return this.children.map(x => x.render());\n    };\n}\n\nexport class SectionAccessory extends Child {\n    constructor(props, root) {\n        super(props, root, \"SECTION_ACCESSORY\");\n        this.children = [];\n    }\n    appendChild(child) {\n        this.children.push(child);\n    }\n    removeChild(child) {\n        const index = this.children.indexOf(child);\n        this.children.splice(index, 1);\n    }\n    insertBefore(child, beforeChild) {\n        const index = this.children.indexOf(beforeChild);\n        if (index === 0) {\n            this.children.unshift(child);\n        } else {\n            this.children.splice(index - 1, 0, child);\n        }\n    }\n    render = () => {\n        if (this.children.length > 1) {\n            throw new Error(\"Accessory only accepts one child\");\n        }\n        if (!this.children || this.children.length === 0) {\n            return null;\n        }\n        return this.children[0].render();\n    };\n}\n","import ReactReconciler from \"react-reconciler\";\nimport { createElement } from \"./createElement\";\nimport { Text } from '../slack-components';\nimport uuid from \"uuid/v4\";\nimport { Button, DatePicker } from \"./components\";\n\nconst rootHostContext = {};\nconst childHostContext = {};\n\nconst hostConfig = {\n  getRootHostContext(rootContainerInstance) {\n    return {\n      root: rootContainerInstance\n    };\n  },\n\n  getChildHostContext(parentHostContext, type, rootContainerInstance) {\n    return {};\n  },\n\n  getPublicInstance(instance) {\n    return {};\n  },\n\n  prepareForCommit(containerInfo) { },\n\n  resetAfterCommit(containerInfo) { },\n\n  createInstance(\n    type,\n    props,\n    rootContainerInstance,\n    hostContext,\n    internalInstanceHandle\n  ) {\n    return createElement(type, props, rootContainerInstance);\n  },\n\n  createTextInstance(\n    text,\n    rootContainerInstance,\n    hostContext,\n    internalInstanceHandle\n  ) {\n    return new Text(text, rootContainerInstance);\n  },\n\n  appendInitialChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  finalizeInitialChildren(\n    hostNode,\n    type,\n    props,\n    rootContainerInstance,\n    hostContext\n  ) {\n    switch (type) {\n      case Button:\n        if (props.onClick) {\n          if (\n            hostNode.__root &&\n            hostNode.__root.handlerRegistry &&\n            hostNode.__actionId\n          ) {\n            delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n            hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n          }\n          hostNode.__actionId = uuid();\n\n          hostNode.onClick = props.onClick;\n\n          hostNode.__root.handlerRegistry[hostNode.__actionId] =\n            hostNode.onClick;\n\n          if (hostNode.__root) {\n            hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n          }\n        }\n        return;\n      case DatePicker:\n        if (props.onChange) {\n          if (\n            hostNode.__root &&\n            hostNode.__root.handlerRegistry &&\n            hostNode.__actionId\n          ) {\n            delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n            hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n          }\n          hostNode.__actionId = uuid();\n\n          hostNode.onChange = props.onChange;\n\n\n          hostNode.__root.handlerRegistry[hostNode.__actionId] =\n            hostNode.onChange;\n\n          if (hostNode.__root) {\n            hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n          }\n        }\n        return;\n      default:\n        return;\n    }\n\n    return false;\n  },\n  prepareUpdate(\n    domElement,\n    type,\n    oldProps,\n    newProps,\n    rootContainerInstance,\n    hostContext\n  ) {\n    const propKeys = new Set(\n      Object.keys(newProps).concat(Object.keys(oldProps))\n    ).values();\n    const payload = [];\n    for (let key of propKeys) {\n      if (\n        key !== \"children\" && // text children are already handled\n        oldProps[key] !== newProps[key]\n      ) {\n        payload.push({ [key]: newProps[key] });\n      }\n    }\n    return payload;\n  },\n  shouldSetTextContent(type, props) {\n    return false;\n  },\n\n  shouldDeprioritizeSubtree(type, props) {\n    console.log(\"shouldDeprioritizeSubtree\");\n  },\n\n  now: Date.now,\n\n  isPrimaryRenderer: true,\n  scheduleDeferredCallback: \"\",\n  cancelDeferredCallback: \"\",\n\n  // -------------------\n  //     Mutation\n  // -------------------\n\n  supportsMutation: true,\n\n  commitMount(domElement, type, newProps, internalInstanceHandle) {\n  },\n\n  commitUpdate(\n    hostNode,\n    updatePayload,\n    type,\n    oldProps,\n    newProps,\n    internalInstanceHandle\n  ) {\n    switch (type) {\n      case Button:\n        updatePayload.forEach(update => {\n          Object.keys(update).forEach(key => {\n            if (key === \"onClick\") {\n              if (hostNode.__root && hostNode.__root.handlerRegistry) {\n                delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n                hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n              }\n              hostNode.__actionId = uuid();\n\n              hostNode.onClick = update[key];\n\n              hostNode.__root.handlerRegistry[hostNode.__actionId] =\n                hostNode.onClick;\n              if (hostNode.__root) {\n                hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n              }\n            } else {\n              hostNode[key] = update[key];\n            }\n          });\n        });\n        break;\n      case DatePicker:\n        updatePayload.forEach(update => {\n          Object.keys(update).forEach(key => {\n            if (key === \"onChange\") {\n              if (hostNode.__root && hostNode.__root.handlerRegistry) {\n                delete hostNode.__root.handlerRegistry[hostNode.__actionId];\n                hostNode.__root.unsubscribeFromAction(hostNode.__actionId);\n              }\n              hostNode.__actionId = uuid();\n\n              hostNode.onChange = update[key];\n\n              hostNode.__root.handlerRegistry[hostNode.__actionId] =\n                hostNode.onChange;\n              if (hostNode.__root) {\n                hostNode.__root.subscribeToNewActionId(hostNode.__actionId);\n              }\n            } else {\n              hostNode[key] = update[key];\n            }\n          });\n        });\n        break;\n      default:\n        updatePayload.forEach(update => {\n          hostNode[key] = update[key];\n        });\n    }\n    setImmediate(() => {\n      hostNode.onCommit();\n    }, 0);\n  },\n\n  resetTextContent(domElement) {\n    throw new Error('Not implemented');\n  },\n\n  commitTextUpdate(textInstance, oldText, newText) {\n    textInstance.setText(newText);\n    setImmediate(() => {\n      textInstance.onCommit();\n    }, 0);\n  },\n\n  appendChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  appendChildToContainer(container, child) {\n    container.appendChild(child);\n  },\n\n  insertBefore(parentInstance, child, beforeChild) {\n  },\n\n  insertInContainerBefore(container, child, beforeChild) {\n    container.insertBefore(child, beforeChild);\n  },\n\n  removeChild(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n\n  removeChildFromContainer(container, child) {\n    container.removeChild(child);\n  }\n};\n\nconst reconciler = ReactReconciler(hostConfig);\n\nconst SlackDOM = {\n  render(component, container) {\n    let reconcilerContainer = reconciler.createContainer(\n      container,\n      false,\n      false\n    );\n    reconciler.updateContainer(component, reconcilerContainer, null, null);\n\n    return container;\n  }\n};\n\nexport default SlackDOM;\n","import { Button, Actions, Context, Markdown, Divider, Section, SectionText, SectionFields, SectionAccessory, Datepicker } from '../slack-components';\nexport const createElement = (type, props, rootContainerInstance) => {\n  const LIB = {\n    BUTTON: () => new Button(props, rootContainerInstance),\n    ACTIONS: () => new Actions(props, rootContainerInstance),\n    CONTEXT: () => new Context(props, rootContainerInstance),\n    MARKDOWN: () => new Markdown(props, rootContainerInstance),\n    DIVIDER: () => new Divider(props, rootContainerInstance),\n    SECTION: () => new Section(props, rootContainerInstance),\n    SECTION_TEXT: () => new SectionText(props, rootContainerInstance),\n    SECTION_FIELDS: () => new SectionFields(props, rootContainerInstance),\n    SECTION_ACCESSORY: () => new SectionAccessory(props, rootContainerInstance),\n    DATEPICKER: () => new Datepicker(props, rootContainerInstance)\n  };\n\n  return LIB[type]();\n};\n","export const Button = \"BUTTON\";\nexport const Actions = \"ACTIONS\";\nexport const Context = \"CONTEXT\";\nexport const Markdown = \"MARKDOWN\";\nexport const Divider = \"DIVIDER\";\nexport const Section = \"SECTION\";\nexport const SectionText = \"SECTION_TEXT\";\nexport const SectionFields = \"SECTION_FIELDS\";\nexport const SectionAccessory = \"SECTION_ACCESSORY\";\nexport const DatePicker = \"DATEPICKER\";\n","import React from 'react';\nimport { SlackContainer } from \"./slack-renderer/container\";\nimport * as components from './slack-renderer';\nimport * as container from './slack-renderer/container';\nimport SlackDom from './slack-renderer';\n\nexport default () => ({\n  components,\n  container,\n  SlackDom\n});\n"],"names":["constructor","subClient","handlerRegistry","response_url","stateful","unsubscribeFromAction","uuid","this","unsubscribe","subscribeToNewActionId","subscribe","appendChild","child","blocks","push","setImmediate","onCommited","removeChild","index","indexOf","splice","insertBefore","beforeChild","nextCommit","render","_","isEqual","lastCommited","emitter","emit","map","x","EventEmitter","on","channel","message","msg","JSON","parse","Child","props","root","type","__root","__type","onCommit","Actions","elements","unshift","Text","text","setText","Button","children","onClick","join","action_id","__actionId","value","style","confirm","Markdown","Context","Datepicker","onChange","undefined","placeholder","initialDate","initial_date","Divider","Section","fields","accessory","SectionText","some","SectionFields","SectionAccessory","length","Error","reconciler","ReactReconciler","getRootHostContext","rootContainerInstance","getChildHostContext","parentHostContext","getPublicInstance","instance","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","BUTTON","ACTIONS","CONTEXT","MARKDOWN","DIVIDER","SECTION","SECTION_TEXT","SECTION_FIELDS","SECTION_ACCESSORY","DATEPICKER","createElement","createTextInstance","appendInitialChild","parentInstance","finalizeInitialChildren","hostNode","prepareUpdate","domElement","oldProps","newProps","payload","Set","Object","keys","concat","values","let","key","shouldSetTextContent","shouldDeprioritizeSubtree","console","log","now","Date","isPrimaryRenderer","scheduleDeferredCallback","cancelDeferredCallback","supportsMutation","commitMount","commitUpdate","updatePayload","forEach","update","resetTextContent","commitTextUpdate","textInstance","oldText","newText","appendChildToContainer","container","insertInContainerBefore","removeChildFromContainer","SlackDOM","component","reconcilerContainer","createContainer","updateContainer","components","SlackDom"],"mappings":"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"}